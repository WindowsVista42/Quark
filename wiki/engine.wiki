= Quark Engine =
* [.] Renderer 3
    * [.] Data Layout
        * [X] Use one big vertex buffer for all vertex information
        * [X] Make the big vertex buffer GPU_ONLY memory
        * [ ] Make writing to the vertex buffer atomic
        * [ ] Use array textures to store texture information
        * [ ] Make the big array texture GPU_ONLY memory
        * [ ] Make writing to the array texture atomic
        * [ ] Look into using 16 bit floats for vertex information and pre-encoding the world matrix to handle scaling.

    * [ ] Compute Shaders
        * [ ] Use indirect drawing
        * [ ] Use a compute shader to calculate world matrix data
        * [ ] Use a compute shader to calculate gpu LOD information
        * [ ] Use a compute shader to compute frustum culling

    * [ ] Architecture
        * [ ] Use global batches based on render pipeline
        * [ ] Find an efficient way to store and combine all of these in one uber-shader for lighting
        * [ ] Texture mip-mapping
        * [ ] Efficiently support 20k draw calls
        * [ ] 3D skeletal animation / 3D stop motion animation
        * [ ] Anisotropic filtering

    * [ ] Lighting
        * [ ] Deferred Lighting
        * [ ] Shadow Lighting

    * [ ] Screen Space Effects
        * [ ] Ambient occlusion
        * [ ] Bloom
        * [ ] Reflections
        * [ ] Haze / Distance fog
        * [ ] FXAA / TAA / SMAA / DLSS / TXAA

